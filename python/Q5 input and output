{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c1db1e8c-ed1c-4bba-b75d-bb3c24320738",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the file name containing student marks:  input_file.txt\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Student Records:\n",
      "(1801310, 66, 78, 70, 'A')\n",
      "(1804425, 46, 80, 58, 'C')\n",
      "(1810827, 99, 90, 96, 'A')\n",
      "(1811398, 34, 99, 57, 'C')\n",
      "(1812167, 99, 60, 85, 'A')\n",
      "(1814348, 99, 74, 90, 'A')\n",
      "(1815646, 64, 80, 69, 'B')\n",
      "(1822607, 66, 59, 64, 'B')\n",
      "(1828016, 80, 80, 80, 'A')\n",
      "(1835247, 66, 51, 60, 'B')\n",
      "(1838912, 86, 54, 75, 'A')\n",
      "(1844734, 94, 51, 79, 'A')\n",
      "(1855456, 70, 39, 59, 'C')\n",
      "(1868058, 66, 75, 69, 'B')\n",
      "(1868578, 60, 54, 57, 'C')\n",
      "(1871813, 24, 84, 46, 'D')\n",
      "(1875869, 94, 59, 82, 'A')\n",
      "(1882149, 45, 45, 45, 'D')\n",
      "(1892631, 89, 75, 84, 'A')\n",
      "(1894369, 62, 31, 51, 'C')\n",
      "(1898192, 72, 83, 76, 'A')\n",
      "(1901402, 70, 35, 58, 'C')\n",
      "(1903578, 88, 37, 70, 'A')\n",
      "(1907567, 85, 70, 80, 'A')\n",
      "(1915819, 50, 68, 57, 'C')\n",
      "(1920499, 54, 62, 57, 'C')\n",
      "(1923106, 84, 83, 84, 'A')\n",
      "(1924280, 32, 96, 55, 'C')\n",
      "(1925619, 74, 74, 74, 'A')\n",
      "(1932827, 56, 28, 46, 'D')\n",
      "(1938973, 70, 54, 64, 'B')\n",
      "(1955979, 77, 96, 84, 'A')\n",
      "(1956052, 56, 55, 56, 'C')\n",
      "(1961463, 99, 36, 77, 'A')\n",
      "(1962016, 29, 47, 35, 'F')\n",
      "(1963755, 47, 40, 45, 'D')\n",
      "(1971335, 47, 44, 46, 'D')\n",
      "(1975305, 44, 38, 42, 'D')\n",
      "(1975802, 62, 58, 60, 'B')\n",
      "(1979701, 99, 41, 79, 'A')\n",
      "(1980890, 62, 76, 66, 'B')\n",
      "(1983929, 58, 38, 51, 'C')\n",
      "(1987434, 99, 98, 99, 'A')\n",
      "(1991995, 68, 44, 59, 'C')\n",
      "(1992226, 30, 59, 40, 'D')\n",
      "(1996334, 40, 78, 53, 'C')\n",
      "(2003492, 42, 54, 47, 'D')\n",
      "(2005275, 78, 80, 79, 'A')\n",
      "(2013607, 80, 49, 69, 'B')\n",
      "(2014621, 88, 77, 84, 'A')\n",
      "(2022465, 20, 46, 29, 'F')\n",
      "(2049436, 39, 89, 56, 'C')\n",
      "(2050486, 76, 97, 83, 'A')\n",
      "(2066237, 60, 68, 62, 'B')\n",
      "(2067524, 44, 62, 50, 'C')\n",
      "(2068293, 82, 26, 63, 'B')\n",
      "(2068701, 60, 70, 64, 'B')\n",
      "(2078406, 72, 76, 73, 'A')\n",
      "(2079765, 79, 46, 68, 'B')\n",
      "(2080816, 99, 58, 85, 'A')\n",
      "(2082586, 58, 38, 51, 'C')\n",
      "(2083148, 20, 75, 39, 'F')\n",
      "(2086500, 74, 60, 69, 'B')\n",
      "(2086935, 68, 100, 79, 'A')\n",
      "(2092266, 46, 56, 50, 'C')\n",
      "(2095152, 54, 54, 54, 'C')\n",
      "(2097280, 88, 92, 89, 'A')\n",
      "(2097299, 99, 66, 87, 'A')\n",
      "(2099309, 38, 76, 51, 'C')\n",
      "(2105013, 6, 72, 29, 'F')\n",
      "(2116305, 20, 78, 40, 'D')\n",
      "(2117615, 72, 94, 80, 'A')\n",
      "(2119755, 74, 96, 82, 'A')\n",
      "(2121797, 46, 73, 56, 'C')\n",
      "(2124632, 58, 60, 59, 'C')\n",
      "(2125759, 49, 44, 47, 'D')\n",
      "(2127004, 68, 48, 61, 'B')\n",
      "(2127276, 99, 34, 76, 'A')\n",
      "(2127920, 86, 60, 77, 'A')\n",
      "(2128205, 62, 64, 63, 'B')\n",
      "(2131709, 66, 69, 67, 'B')\n",
      "(2133275, 52, 94, 67, 'B')\n",
      "(2134731, 90, 68, 82, 'A')\n",
      "(2135594, 92, 46, 76, 'A')\n",
      "(2140505, 57, 97, 71, 'A')\n",
      "(2147325, 46, 58, 50, 'C')\n",
      "(2150482, 64, 74, 67, 'B')\n",
      "(2155555, 99, 36, 77, 'A')\n",
      "(2157631, 30, 100, 55, 'C')\n",
      "(2161939, 68, 81, 72, 'A')\n",
      "(2165362, 45, 62, 51, 'C')\n",
      "(2166511, 76, 95, 83, 'A')\n",
      "(2168103, 98, 2, 64, 'B')\n",
      "(2168985, 32, 56, 40, 'D')\n",
      "(2170785, 8, 38, 18, 'F')\n",
      "(2176075, 38, 72, 50, 'C')\n",
      "(2180906, 48, 54, 50, 'C')\n",
      "(2193120, 64, 46, 58, 'C')\n",
      "(2194965, 50, 52, 51, 'C')\n",
      "(2195576, 52, 98, 68, 'B')\n"
     ]
    }
   ],
   "source": [
    "#Exercise 5\n",
    "import numpy as np\n",
    "\n",
    "# Define grading fuction\n",
    "def calculate_grade(overall_mark):\n",
    "    \"\"\"\n",
    "    Calculate grade based on the overall mark.\n",
    "    \"\"\"\n",
    "    if overall_mark >= 70:\n",
    "        return \"A\"\n",
    "    elif overall_mark >= 60:\n",
    "        return \"B\"\n",
    "    elif overall_mark >= 50:\n",
    "        return \"C\"\n",
    "    elif overall_mark >= 40:\n",
    "        return \"D\"\n",
    "    else:\n",
    "        return \"F\"\n",
    "\n",
    "# Main program\n",
    "def main():\n",
    "    try:\n",
    "        # Step 1: Get file name frm user &open the file\n",
    "        file_name = input(\"Enter the file name containing student marks: \")\n",
    "        with open(file_name, \"r\") as file:\n",
    "            # Read first line to get the number of students &coursework weigting\n",
    "            first_line = file.readline().strip()\n",
    "            num_students, coursework_weighting = map(float, first_line.split())\n",
    "            num_students = int(num_students)\n",
    "            \n",
    "            # Create 2D array for student data\n",
    "            student_data = np.array([[0, 0.0, 0.0, 0.0]] * num_students)\n",
    "\n",
    "            # Read remaining lines & poplate the array\n",
    "            for i, line in enumerate(file):\n",
    "                reg_no, exam_mark, coursework_mark = line.strip().split()\n",
    "                reg_no = int(reg_no)\n",
    "                exam_mark = float(exam_mark)\n",
    "                coursework_mark = float(coursework_mark)\n",
    "                overall_mark = (exam_mark * (1 - coursework_weighting / 100)) + (\n",
    "                    coursework_mark * (coursework_weighting / 100)\n",
    "                )\n",
    "                student_data[i] = [reg_no, exam_mark, coursework_mark, overall_mark]\n",
    "\n",
    "        # Step 2: Define named dtype\n",
    "        dtype = np.dtype(\n",
    "            [\n",
    "                (\"reg_no\", int),\n",
    "                (\"exam_mark\", int),\n",
    "                (\"coursework_mark\", int),\n",
    "                (\"overall_mark\", int),\n",
    "                (\"grade\", \"U1\"),  # String of length 1 for grade\n",
    "            ]\n",
    "        )\n",
    "\n",
    "        # Step 3: Create 1D array using  named dtype\n",
    "        student_records = np.array(\n",
    "            [(0, 0, 0, 0, \"\")] * num_students, dtype=dtype\n",
    "        )\n",
    "\n",
    "        # Poplate  array with data from student_data\n",
    "        for i, row in enumerate(student_data):\n",
    "            reg_no = int(row[0])\n",
    "            exam_mark = round(row[1])\n",
    "            coursework_mark = round(row[2])\n",
    "            overall_mark = round(row[3])\n",
    "            grade = calculate_grade(overall_mark)\n",
    "            student_records[i] = (reg_no, exam_mark, coursework_mark, overall_mark, grade)\n",
    "\n",
    "        # Output  final array\n",
    "        print(\"\\nStudent Records:\")\n",
    "        for record in student_records:\n",
    "            print(record)\n",
    "\n",
    "    except FileNotFoundError:\n",
    "        print(f\"Error: The file '{file_name}' does not exist.\")\n",
    "    except ValueError:\n",
    "        print(\"Error: Invalid file format or contents.\")\n",
    "\n",
    "# Run the program\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
